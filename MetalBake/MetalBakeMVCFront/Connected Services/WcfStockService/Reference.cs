//------------------------------------------------------------------------------
// <auto-generated>
//     Este código fue generado por una herramienta.
//     Versión de runtime:4.0.30319.42000
//
//     Los cambios en este archivo podrían causar un comportamiento incorrecto y se perderán si
//     se vuelve a generar el código.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MetalBakeMVCFront.WcfStockService {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="WcfStockService.IService")]
    public interface IService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/Exist", ReplyAction="http://tempuri.org/IService/ExistResponse")]
        bool Exist(string item);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/Exist", ReplyAction="http://tempuri.org/IService/ExistResponse")]
        System.Threading.Tasks.Task<bool> ExistAsync(string item);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetStock", ReplyAction="http://tempuri.org/IService/GetStockResponse")]
        int GetStock(string key);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetStock", ReplyAction="http://tempuri.org/IService/GetStockResponse")]
        System.Threading.Tasks.Task<int> GetStockAsync(string key);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/CheckStock", ReplyAction="http://tempuri.org/IService/CheckStockResponse")]
        bool CheckStock(string item, int amount);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/CheckStock", ReplyAction="http://tempuri.org/IService/CheckStockResponse")]
        System.Threading.Tasks.Task<bool> CheckStockAsync(string item, int amount);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/ReduceStock", ReplyAction="http://tempuri.org/IService/ReduceStockResponse")]
        bool ReduceStock(string item, int amount);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/ReduceStock", ReplyAction="http://tempuri.org/IService/ReduceStockResponse")]
        System.Threading.Tasks.Task<bool> ReduceStockAsync(string item, int amount);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/IncreaseStock", ReplyAction="http://tempuri.org/IService/IncreaseStockResponse")]
        bool IncreaseStock(string item, int amount);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/IncreaseStock", ReplyAction="http://tempuri.org/IService/IncreaseStockResponse")]
        System.Threading.Tasks.Task<bool> IncreaseStockAsync(string item, int amount);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetAllStock", ReplyAction="http://tempuri.org/IService/GetAllStockResponse")]
        Metal_Bake.Infra.WcfStockReference.ItemStock[] GetAllStock();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetAllStock", ReplyAction="http://tempuri.org/IService/GetAllStockResponse")]
        System.Threading.Tasks.Task<Metal_Bake.Infra.WcfStockReference.ItemStock[]> GetAllStockAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/TxtListStock", ReplyAction="http://tempuri.org/IService/TxtListStockResponse")]
        void TxtListStock();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/TxtListStock", ReplyAction="http://tempuri.org/IService/TxtListStockResponse")]
        System.Threading.Tasks.Task TxtListStockAsync();
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IServiceChannel : MetalBakeMVCFront.WcfStockService.IService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ServiceClient : System.ServiceModel.ClientBase<MetalBakeMVCFront.WcfStockService.IService>, MetalBakeMVCFront.WcfStockService.IService {
        
        public ServiceClient() {
        }
        
        public ServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public ServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public bool Exist(string item) {
            return base.Channel.Exist(item);
        }
        
        public System.Threading.Tasks.Task<bool> ExistAsync(string item) {
            return base.Channel.ExistAsync(item);
        }
        
        public int GetStock(string key) {
            return base.Channel.GetStock(key);
        }
        
        public System.Threading.Tasks.Task<int> GetStockAsync(string key) {
            return base.Channel.GetStockAsync(key);
        }
        
        public bool CheckStock(string item, int amount) {
            return base.Channel.CheckStock(item, amount);
        }
        
        public System.Threading.Tasks.Task<bool> CheckStockAsync(string item, int amount) {
            return base.Channel.CheckStockAsync(item, amount);
        }
        
        public bool ReduceStock(string item, int amount) {
            return base.Channel.ReduceStock(item, amount);
        }
        
        public System.Threading.Tasks.Task<bool> ReduceStockAsync(string item, int amount) {
            return base.Channel.ReduceStockAsync(item, amount);
        }
        
        public bool IncreaseStock(string item, int amount) {
            return base.Channel.IncreaseStock(item, amount);
        }
        
        public System.Threading.Tasks.Task<bool> IncreaseStockAsync(string item, int amount) {
            return base.Channel.IncreaseStockAsync(item, amount);
        }
        
        public Metal_Bake.Infra.WcfStockReference.ItemStock[] GetAllStock() {
            return base.Channel.GetAllStock();
        }
        
        public System.Threading.Tasks.Task<Metal_Bake.Infra.WcfStockReference.ItemStock[]> GetAllStockAsync() {
            return base.Channel.GetAllStockAsync();
        }
        
        public void TxtListStock() {
            base.Channel.TxtListStock();
        }
        
        public System.Threading.Tasks.Task TxtListStockAsync() {
            return base.Channel.TxtListStockAsync();
        }
    }
}
